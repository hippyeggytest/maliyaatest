-- Create schools table
CREATE TABLE schools (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL,
  logo TEXT,
  status TEXT DEFAULT 'active',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Create users table
CREATE TABLE users (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL,
  email TEXT UNIQUE NOT NULL,
  school_id BIGINT REFERENCES schools(id),
  role TEXT DEFAULT 'user',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Create subscriptions table
CREATE TABLE subscriptions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  school_id BIGINT REFERENCES schools(id),
  plan_type TEXT NOT NULL,
  status TEXT DEFAULT 'active',
  start_date TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
  end_date TIMESTAMP WITH TIME ZONE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Create fees table
CREATE TABLE fees (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  school_id BIGINT REFERENCES schools(id),
  name TEXT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  description TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Create students table
CREATE TABLE students (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  school_id BIGINT REFERENCES schools(id),
  name TEXT NOT NULL,
  grade TEXT,
  parent_name TEXT,
  contact_number TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Create payments table
CREATE TABLE payments (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  school_id BIGINT REFERENCES schools(id),
  student_id BIGINT REFERENCES students(id),
  fee_id BIGINT REFERENCES fees(id),
  amount DECIMAL(10,2) NOT NULL,
  payment_date TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
  payment_method TEXT,
  status TEXT DEFAULT 'completed',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Set up Row Level Security (RLS)
ALTER TABLE schools ENABLE ROW LEVEL SECURITY;
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE subscriptions ENABLE ROW LEVEL SECURITY;
ALTER TABLE fees ENABLE ROW LEVEL SECURITY;
ALTER TABLE students ENABLE ROW LEVEL SECURITY;
ALTER TABLE payments ENABLE ROW LEVEL SECURITY;

-- Control Center Policies (using service role)
CREATE POLICY "Control Center full access to schools" ON schools
  FOR ALL USING (auth.jwt() ->> 'role' = 'admin');

CREATE POLICY "Control Center full access to users" ON users
  FOR ALL USING (auth.jwt() ->> 'role' = 'admin');

CREATE POLICY "Control Center full access to subscriptions" ON subscriptions
  FOR ALL USING (auth.jwt() ->> 'role' = 'admin');

-- School Portal Policies (using anon key)
CREATE POLICY "Schools can view their own data" ON schools
  FOR SELECT USING (id = (auth.jwt() ->> 'school_id')::bigint);

CREATE POLICY "Schools can view their own users" ON users
  FOR SELECT USING (school_id = (auth.jwt() ->> 'school_id')::bigint);

CREATE POLICY "Schools can view their own subscriptions" ON subscriptions
  FOR SELECT USING (school_id = (auth.jwt() ->> 'school_id')::bigint);

CREATE POLICY "Schools can manage their own fees" ON fees
  FOR ALL USING (school_id = (auth.jwt() ->> 'school_id')::bigint);

CREATE POLICY "Schools can manage their own students" ON students
  FOR ALL USING (school_id = (auth.jwt() ->> 'school_id')::bigint);

CREATE POLICY "Schools can manage their own payments" ON payments
  FOR ALL USING (school_id = (auth.jwt() ->> 'school_id')::bigint);

-- Create indexes for better performance
CREATE INDEX idx_schools_status ON schools(status);
CREATE INDEX idx_users_school_id ON users(school_id);
CREATE INDEX idx_subscriptions_school_id ON subscriptions(school_id);
CREATE INDEX idx_fees_school_id ON fees(school_id);
CREATE INDEX idx_students_school_id ON students(school_id);
CREATE INDEX idx_payments_school_id ON payments(school_id);
CREATE INDEX idx_payments_student_id ON payments(student_id);
CREATE INDEX idx_payments_fee_id ON payments(fee_id); 